main_start: 			nop								//Main method of convert
						in "Number? " => r_num			//In num
						in "Base? " => r_base			//In base
						
						//Start saving the activation record.
						loadI #error => r_caller_label	//The return address. This returns should not be called, hence if it does it goes to error.
						loadI 1 => r_function_convert	//The return value of a function
						push r_function_convert			//Push the return value register on stack.
						push r_caller_label				//Push the return address on stack
						push r_num						//Push the local variables on stack
						push r_base						//Push the local variables on stack
						
						//Create AR of the callee. 
						loadI 0 => r_function_convert	
						push r_function_convert			//Push register for return value of callee
						loadI #main_after_convert => r_caller_label	//Push return address for callee. So continue after the call.
						push r_caller_label				//Push return address
						push r_num						//Pushing arguments
						push r_base						//Pushing arguments
						jumpI -> convert				//Call convert function
main_after_convert:		nop								//When the program returns from the convert function it continues here.
						pop => r_function_convert		//Retrieve the return value of callee
						out "Length: ", r_function_convert	//Output the return value of the callee
						jumpI -> end					//End the program.
						
convert:				nop								//Start of the convert function
						pop => r_base					//Retrieve arguments given by caller
						pop => r_num					//Retrieve arguments given by caller
						div r_num, r_base => r_rest				//Perform calculations: rest = num/base
						mult r_base, r_rest => r_tmp			//base*rest
						sub r_num, r_tmp => r_tmp				//num - base*rest
						out "Next digit: ", r_tmp				// out(num-base*rest)
						loadI 0 => r_tmp						//Prepare if statement
						cmp_EQ r_tmp, r_rest => r_cmp			//If statement
						cbr r_cmp -> convert_return_one, convert_return_convert		//Return to case where rest is 0 or 1
convert_return_one: 	nop										//Rest is one.
						loadI 1 => r_return_value				//create local register and store 1
						pop => r_caller_label					//pop the return label so that the function knows where to return to
						pop => r_function_convert				// pop the return_value from the stack, then you can load the actual return value computed
						push r_return_value						//push the computed return value
						jump -> r_caller_label					//Return to where this function was called
convert_return_convert: nop										//Preparing to make recursive call
						//Save the activation record
						push r_num								//Saving local variables
						push r_base								//Saving local variables
						//Create activation record of the child	
						loadI #convert_rec_cont => r_caller_label	//the return address 
						push r_function_convert					//Push register for return value
						push r_caller_label						//Push the return address
						push r_rest								//Passing arguments
						push r_base								//Passing arguments
						jumpI -> convert						//Make recursive call to itself. 
convert_rec_cont:		nop										//Upon returning from the recursive call
						//Load the activation record
						pop => r_function_convert 				//The return value pushed by its callee
						addI r_function_convert,1  => r_result	//Add 1 to the return value
						pop =>r_base							//This function is now over. So its data gets popped from the stack
						pop => r_num							//Popping local variables
						pop => r_caller_label					//Pop return address
						pop => r_function_convert				//Pop the return value
						push r_result							//Push the return value of this function. So the return value +1
						jump -> r_caller_label					//Return to where this function was called

error:					nop											//The function is not supposed to come here. Error code.
						out "Error! Length: ", r_function_convert	//In case of error: print the return value.
end:					nop											//End of program
					
					