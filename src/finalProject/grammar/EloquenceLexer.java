// Generated from Eloquence.g4 by ANTLR 4.5
package finalProject.grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class EloquenceLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		AND=1, BOOLEAN=2, CHAR=3, CONST=4, ELSE=5, EQ=6, FALSE=7, GE=8, GT=9, 
		IF=10, INTEGER=11, LE=12, LT=13, NE=14, NOT=15, OR=16, PROGRAM=17, RETURN=18, 
		TRUE=19, VAR=20, VOID=21, WHILE=22, ASSIGN=23, COMMA=24, DIVIDE=25, LBRACE=26, 
		LPAR=27, LSQBRACKET=28, MINUS=29, MODULO=30, MULTIPLY=31, PLUS=32, RBRACE=33, 
		RPAR=34, RSQBRACKET=35, SEMI=36, ID=37, NUM=38, COMMENT=39, LINE_COMMENT=40, 
		WS=41;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"AND", "BOOLEAN", "CHAR", "CONST", "ELSE", "EQ", "FALSE", "GE", "GT", 
		"IF", "INTEGER", "LE", "LT", "NE", "NOT", "OR", "PROGRAM", "RETURN", "TRUE", 
		"VAR", "VOID", "WHILE", "ASSIGN", "COMMA", "DIVIDE", "LBRACE", "LPAR", 
		"LSQBRACKET", "MINUS", "MODULO", "MULTIPLY", "PLUS", "RBRACE", "RPAR", 
		"RSQBRACKET", "SEMI", "ID", "NUM", "LETTER", "DIGIT", "COMMENT", "LINE_COMMENT", 
		"WS", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'='", 
		"','", "'/'", "'{'", "'('", "'['", "'-'", "'%'", "'*'", "'+'", "'}'", 
		"')'", "']'", "';'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "AND", "BOOLEAN", "CHAR", "CONST", "ELSE", "EQ", "FALSE", "GE", 
		"GT", "IF", "INTEGER", "LE", "LT", "NE", "NOT", "OR", "PROGRAM", "RETURN", 
		"TRUE", "VAR", "VOID", "WHILE", "ASSIGN", "COMMA", "DIVIDE", "LBRACE", 
		"LPAR", "LSQBRACKET", "MINUS", "MODULO", "MULTIPLY", "PLUS", "RBRACE", 
		"RPAR", "RSQBRACKET", "SEMI", "ID", "NUM", "COMMENT", "LINE_COMMENT", 
		"WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public EloquenceLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Eloquence.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2+\u0200\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\3\2\3\2\3\2\3\2"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3"+
		"\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3"+
		"\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3&\7&\u019d\n&\f"+
		"&\16&\u01a0\13&\3\'\3\'\7\'\u01a4\n\'\f\'\16\'\u01a7\13\'\3(\3(\3)\3)"+
		"\3*\3*\3*\3*\7*\u01b1\n*\f*\16*\u01b4\13*\3*\3*\3*\3*\3*\3+\3+\3+\3+\7"+
		"+\u01bf\n+\f+\16+\u01c2\13+\3+\3+\3,\6,\u01c7\n,\r,\16,\u01c8\3,\3,\3"+
		"-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65"+
		"\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3"+
		"?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\3\u01b2\2G\3\3\5\4\7\5"+
		"\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23"+
		"%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G"+
		"%I&K\'M(O\2Q\2S)U*W+Y\2[\2]\2_\2a\2c\2e\2g\2i\2k\2m\2o\2q\2s\2u\2w\2y"+
		"\2{\2}\2\177\2\u0081\2\u0083\2\u0085\2\u0087\2\u0089\2\u008b\2\3\2 \4"+
		"\2C\\c|\3\2\62;\4\2\f\f\17\17\5\2\13\f\17\17\"\"\4\2CCcc\4\2DDdd\4\2E"+
		"Eee\4\2FFff\4\2GGgg\4\2HHhh\4\2IIii\4\2JJjj\4\2KKkk\4\2LLll\4\2MMmm\4"+
		"\2NNnn\4\2OOoo\4\2PPpp\4\2QQqq\4\2RRrr\4\2SSss\4\2TTtt\4\2UUuu\4\2VVv"+
		"v\4\2WWww\4\2XXxx\4\2YYyy\4\2ZZzz\4\2[[{{\4\2\\\\||\u01e9\2\3\3\2\2\2"+
		"\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2"+
		"\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2"+
		"\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2"+
		"\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2"+
		"\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2"+
		"\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2"+
		"\2K\3\2\2\2\2M\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\3\u008d\3\2\2"+
		"\2\5\u0091\3\2\2\2\7\u0098\3\2\2\2\t\u00b3\3\2\2\2\13\u00be\3\2\2\2\r"+
		"\u00cb\3\2\2\2\17\u00d3\3\2\2\2\21\u00d9\3\2\2\2\23\u00eb\3\2\2\2\25\u00f6"+
		"\3\2\2\2\27\u00ff\3\2\2\2\31\u010e\3\2\2\2\33\u0120\3\2\2\2\35\u012b\3"+
		"\2\2\2\37\u0136\3\2\2\2!\u013a\3\2\2\2#\u013d\3\2\2\2%\u0145\3\2\2\2\'"+
		"\u0150\3\2\2\2)\u015a\3\2\2\2+\u0166\3\2\2\2-\u0172\3\2\2\2/\u017d\3\2"+
		"\2\2\61\u017f\3\2\2\2\63\u0181\3\2\2\2\65\u0183\3\2\2\2\67\u0185\3\2\2"+
		"\29\u0187\3\2\2\2;\u0189\3\2\2\2=\u018b\3\2\2\2?\u018d\3\2\2\2A\u018f"+
		"\3\2\2\2C\u0191\3\2\2\2E\u0193\3\2\2\2G\u0195\3\2\2\2I\u0197\3\2\2\2K"+
		"\u0199\3\2\2\2M\u01a1\3\2\2\2O\u01a8\3\2\2\2Q\u01aa\3\2\2\2S\u01ac\3\2"+
		"\2\2U\u01ba\3\2\2\2W\u01c6\3\2\2\2Y\u01cc\3\2\2\2[\u01ce\3\2\2\2]\u01d0"+
		"\3\2\2\2_\u01d2\3\2\2\2a\u01d4\3\2\2\2c\u01d6\3\2\2\2e\u01d8\3\2\2\2g"+
		"\u01da\3\2\2\2i\u01dc\3\2\2\2k\u01de\3\2\2\2m\u01e0\3\2\2\2o\u01e2\3\2"+
		"\2\2q\u01e4\3\2\2\2s\u01e6\3\2\2\2u\u01e8\3\2\2\2w\u01ea\3\2\2\2y\u01ec"+
		"\3\2\2\2{\u01ee\3\2\2\2}\u01f0\3\2\2\2\177\u01f2\3\2\2\2\u0081\u01f4\3"+
		"\2\2\2\u0083\u01f6\3\2\2\2\u0085\u01f8\3\2\2\2\u0087\u01fa\3\2\2\2\u0089"+
		"\u01fc\3\2\2\2\u008b\u01fe\3\2\2\2\u008d\u008e\5Y-\2\u008e\u008f\5s:\2"+
		"\u008f\u0090\5_\60\2\u0090\4\3\2\2\2\u0091\u0092\5e\63\2\u0092\u0093\5"+
		"a\61\2\u0093\u0094\5u;\2\u0094\u0095\5{>\2\u0095\u0096\5e\63\2\u0096\u0097"+
		"\5a\61\2\u0097\6\3\2\2\2\u0098\u0099\5o8\2\u0099\u009a\5a\61\2\u009a\u009b"+
		"\5\u0087D\2\u009b\u009c\5u;\2\u009c\u009d\5e\63\2\u009d\u009e\5{>\2\u009e"+
		"\u009f\5Y-\2\u009f\u00a0\5w<\2\u00a0\u00a1\5g\64\2\u00a1\u00a2\5i\65\2"+
		"\u00a2\u00a3\5]/\2\u00a3\u00a4\5i\65\2\u00a4\u00a5\5_\60\2\u00a5\u00a6"+
		"\5a\61\2\u00a6\u00a7\5s:\2\u00a7\u00a8\5\177@\2\u00a8\u00a9\5i\65\2\u00a9"+
		"\u00aa\5c\62\2\u00aa\u00ab\5\u0089E\2\u00ab\u00ac\5i\65\2\u00ac\u00ad"+
		"\5s:\2\u00ad\u00ae\5e\63\2\u00ae\u00af\5\u0081A\2\u00af\u00b0\5s:\2\u00b0"+
		"\u00b1\5i\65\2\u00b1\u00b2\5\177@\2\u00b2\b\3\2\2\2\u00b3\u00b4\5}?\2"+
		"\u00b4\u00b5\5Y-\2\u00b5\u00b6\5]/\2\u00b6\u00b7\5{>\2\u00b7\u00b8\5u"+
		";\2\u00b8\u00b9\5}?\2\u00b9\u00ba\5Y-\2\u00ba\u00bb\5s:\2\u00bb\u00bc"+
		"\5]/\2\u00bc\u00bd\5\177@\2\u00bd\n\3\2\2\2\u00be\u00bf\5]/\2\u00bf\u00c0"+
		"\5u;\2\u00c0\u00c1\5s:\2\u00c1\u00c2\5\177@\2\u00c2\u00c3\5{>\2\u00c3"+
		"\u00c4\5Y-\2\u00c4\u00c5\5{>\2\u00c5\u00c6\5i\65\2\u00c6\u00c7\5\u0085"+
		"C\2\u00c7\u00c8\5i\65\2\u00c8\u00c9\5}?\2\u00c9\u00ca\5a\61\2\u00ca\f"+
		"\3\2\2\2\u00cb\u00cc\5a\61\2\u00cc\u00cd\5y=\2\u00cd\u00ce\5\u0081A\2"+
		"\u00ce\u00cf\5Y-\2\u00cf\u00d0\5o8\2\u00d0\u00d1\5\177@\2\u00d1\u00d2"+
		"\5u;\2\u00d2\16\3\2\2\2\u00d3\u00d4\5[.\2\u00d4\u00d5\5u;\2\u00d5\u00d6"+
		"\5e\63\2\u00d6\u00d7\5\u0081A\2\u00d7\u00d8\5}?\2\u00d8\20\3\2\2\2\u00d9"+
		"\u00da\5}?\2\u00da\u00db\5\u0081A\2\u00db\u00dc\5w<\2\u00dc\u00dd\5a\61"+
		"\2\u00dd\u00de\5{>\2\u00de\u00df\5i\65\2\u00df\u00e0\5u;\2\u00e0\u00e1"+
		"\5{>\2\u00e1\u00e2\5u;\2\u00e2\u00e3\5{>\2\u00e3\u00e4\5a\61\2\u00e4\u00e5"+
		"\5y=\2\u00e5\u00e6\5\u0081A\2\u00e6\u00e7\5Y-\2\u00e7\u00e8\5o8\2\u00e8"+
		"\u00e9\5\177@\2\u00e9\u00ea\5u;\2\u00ea\22\3\2\2\2\u00eb\u00ec\5}?\2\u00ec"+
		"\u00ed\5\u0081A\2\u00ed\u00ee\5w<\2\u00ee\u00ef\5a\61\2\u00ef\u00f0\5"+
		"{>\2\u00f0\u00f1\5i\65\2\u00f1\u00f2\5u;\2\u00f2\u00f3\5{>\2\u00f3\u00f4"+
		"\5\177@\2\u00f4\u00f5\5u;\2\u00f5\24\3\2\2\2\u00f6\u00f7\5Y-\2\u00f7\u00f8"+
		"\5}?\2\u00f8\u00f9\5}?\2\u00f9\u00fa\5\u0081A\2\u00fa\u00fb\5q9\2\u00fb"+
		"\u00fc\5i\65\2\u00fc\u00fd\5s:\2\u00fd\u00fe\5e\63\2\u00fe\26\3\2\2\2"+
		"\u00ff\u0100\5s:\2\u0100\u0101\5\u0081A\2\u0101\u0102\5q9\2\u0102\u0103"+
		"\5a\61\2\u0103\u0104\5{>\2\u0104\u0105\5i\65\2\u0105\u0106\5]/\2\u0106"+
		"\u0107\5Y-\2\u0107\u0108\5o8\2\u0108\u0109\5_\60\2\u0109\u010a\5i\65\2"+
		"\u010a\u010b\5e\63\2\u010b\u010c\5i\65\2\u010c\u010d\5\177@\2\u010d\30"+
		"\3\2\2\2\u010e\u010f\5i\65\2\u010f\u0110\5s:\2\u0110\u0111\5c\62\2\u0111"+
		"\u0112\5a\61\2\u0112\u0113\5{>\2\u0113\u0114\5i\65\2\u0114\u0115\5u;\2"+
		"\u0115\u0116\5{>\2\u0116\u0117\5u;\2\u0117\u0118\5{>\2\u0118\u0119\5a"+
		"\61\2\u0119\u011a\5y=\2\u011a\u011b\5\u0081A\2\u011b\u011c\5Y-\2\u011c"+
		"\u011d\5o8\2\u011d\u011e\5\177@\2\u011e\u011f\5u;\2\u011f\32\3\2\2\2\u0120"+
		"\u0121\5i\65\2\u0121\u0122\5s:\2\u0122\u0123\5c\62\2\u0123\u0124\5a\61"+
		"\2\u0124\u0125\5{>\2\u0125\u0126\5i\65\2\u0126\u0127\5u;\2\u0127\u0128"+
		"\5{>\2\u0128\u0129\5\177@\2\u0129\u012a\5u;\2\u012a\34\3\2\2\2\u012b\u012c"+
		"\5s:\2\u012c\u012d\5u;\2\u012d\u012e\5\177@\2\u012e\u012f\5a\61\2\u012f"+
		"\u0130\5y=\2\u0130\u0131\5\u0081A\2\u0131\u0132\5Y-\2\u0132\u0133\5o8"+
		"\2\u0133\u0134\5\177@\2\u0134\u0135\5u;\2\u0135\36\3\2\2\2\u0136\u0137"+
		"\5s:\2\u0137\u0138\5u;\2\u0138\u0139\5\177@\2\u0139 \3\2\2\2\u013a\u013b"+
		"\5u;\2\u013b\u013c\5{>\2\u013c\"\3\2\2\2\u013d\u013e\5w<\2\u013e\u013f"+
		"\5{>\2\u013f\u0140\5u;\2\u0140\u0141\5e\63\2\u0141\u0142\5{>\2\u0142\u0143"+
		"\5Y-\2\u0143\u0144\5q9\2\u0144$\3\2\2\2\u0145\u0146\5{>\2\u0146\u0147"+
		"\5a\61\2\u0147\u0148\5o8\2\u0148\u0149\5i\65\2\u0149\u014a\5s:\2\u014a"+
		"\u014b\5y=\2\u014b\u014c\5\u0081A\2\u014c\u014d\5i\65\2\u014d\u014e\5"+
		"}?\2\u014e\u014f\5g\64\2\u014f&\3\2\2\2\u0150\u0151\5\u0081A\2\u0151\u0152"+
		"\5s:\2\u0152\u0153\5c\62\2\u0153\u0154\5a\61\2\u0154\u0155\5i\65\2\u0155"+
		"\u0156\5e\63\2\u0156\u0157\5s:\2\u0157\u0158\5a\61\2\u0158\u0159\5_\60"+
		"\2\u0159(\3\2\2\2\u015a\u015b\5g\64\2\u015b\u015c\5i\65\2\u015c\u015d"+
		"\5e\63\2\u015d\u015e\5g\64\2\u015e\u015f\5w<\2\u015f\u0160\5u;\2\u0160"+
		"\u0161\5\u0085C\2\u0161\u0162\5a\61\2\u0162\u0163\5{>\2\u0163\u0164\5"+
		"a\61\2\u0164\u0165\5_\60\2\u0165*\3\2\2\2\u0166\u0167\5e\63\2\u0167\u0168"+
		"\5u;\2\u0168\u0169\5_\60\2\u0169\u016a\5c\62\2\u016a\u016b\5u;\2\u016b"+
		"\u016c\5{>\2\u016c\u016d\5}?\2\u016d\u016e\5Y-\2\u016e\u016f\5m\67\2\u016f"+
		"\u0170\5a\61\2\u0170\u0171\5s:\2\u0171,\3\2\2\2\u0172\u0173\5\177@\2\u0173"+
		"\u0174\5g\64\2\u0174\u0175\5{>\2\u0175\u0176\5u;\2\u0176\u0177\5\u0081"+
		"A\2\u0177\u0178\5e\63\2\u0178\u0179\5g\64\2\u0179\u017a\5u;\2\u017a\u017b"+
		"\5\u0081A\2\u017b\u017c\5\177@\2\u017c.\3\2\2\2\u017d\u017e\7?\2\2\u017e"+
		"\60\3\2\2\2\u017f\u0180\7.\2\2\u0180\62\3\2\2\2\u0181\u0182\7\61\2\2\u0182"+
		"\64\3\2\2\2\u0183\u0184\7}\2\2\u0184\66\3\2\2\2\u0185\u0186\7*\2\2\u0186"+
		"8\3\2\2\2\u0187\u0188\7]\2\2\u0188:\3\2\2\2\u0189\u018a\7/\2\2\u018a<"+
		"\3\2\2\2\u018b\u018c\7\'\2\2\u018c>\3\2\2\2\u018d\u018e\7,\2\2\u018e@"+
		"\3\2\2\2\u018f\u0190\7-\2\2\u0190B\3\2\2\2\u0191\u0192\7\177\2\2\u0192"+
		"D\3\2\2\2\u0193\u0194\7+\2\2\u0194F\3\2\2\2\u0195\u0196\7_\2\2\u0196H"+
		"\3\2\2\2\u0197\u0198\7=\2\2\u0198J\3\2\2\2\u0199\u019e\5O(\2\u019a\u019d"+
		"\5O(\2\u019b\u019d\5Q)\2\u019c\u019a\3\2\2\2\u019c\u019b\3\2\2\2\u019d"+
		"\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019fL\3\2\2\2"+
		"\u01a0\u019e\3\2\2\2\u01a1\u01a5\5Q)\2\u01a2\u01a4\5Q)\2\u01a3\u01a2\3"+
		"\2\2\2\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6"+
		"N\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01a9\t\2\2\2\u01a9P\3\2\2\2\u01aa"+
		"\u01ab\t\3\2\2\u01abR\3\2\2\2\u01ac\u01ad\7\61\2\2\u01ad\u01ae\7,\2\2"+
		"\u01ae\u01b2\3\2\2\2\u01af\u01b1\13\2\2\2\u01b0\u01af\3\2\2\2\u01b1\u01b4"+
		"\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4"+
		"\u01b2\3\2\2\2\u01b5\u01b6\7,\2\2\u01b6\u01b7\7\61\2\2\u01b7\u01b8\3\2"+
		"\2\2\u01b8\u01b9\b*\2\2\u01b9T\3\2\2\2\u01ba\u01bb\7\61\2\2\u01bb\u01bc"+
		"\7\61\2\2\u01bc\u01c0\3\2\2\2\u01bd\u01bf\n\4\2\2\u01be\u01bd\3\2\2\2"+
		"\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c3"+
		"\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c4\b+\2\2\u01c4V\3\2\2\2\u01c5\u01c7"+
		"\t\5\2\2\u01c6\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8"+
		"\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\b,\2\2\u01cbX\3\2\2\2\u01cc"+
		"\u01cd\t\6\2\2\u01cdZ\3\2\2\2\u01ce\u01cf\t\7\2\2\u01cf\\\3\2\2\2\u01d0"+
		"\u01d1\t\b\2\2\u01d1^\3\2\2\2\u01d2\u01d3\t\t\2\2\u01d3`\3\2\2\2\u01d4"+
		"\u01d5\t\n\2\2\u01d5b\3\2\2\2\u01d6\u01d7\t\13\2\2\u01d7d\3\2\2\2\u01d8"+
		"\u01d9\t\f\2\2\u01d9f\3\2\2\2\u01da\u01db\t\r\2\2\u01dbh\3\2\2\2\u01dc"+
		"\u01dd\t\16\2\2\u01ddj\3\2\2\2\u01de\u01df\t\17\2\2\u01dfl\3\2\2\2\u01e0"+
		"\u01e1\t\20\2\2\u01e1n\3\2\2\2\u01e2\u01e3\t\21\2\2\u01e3p\3\2\2\2\u01e4"+
		"\u01e5\t\22\2\2\u01e5r\3\2\2\2\u01e6\u01e7\t\23\2\2\u01e7t\3\2\2\2\u01e8"+
		"\u01e9\t\24\2\2\u01e9v\3\2\2\2\u01ea\u01eb\t\25\2\2\u01ebx\3\2\2\2\u01ec"+
		"\u01ed\t\26\2\2\u01edz\3\2\2\2\u01ee\u01ef\t\27\2\2\u01ef|\3\2\2\2\u01f0"+
		"\u01f1\t\30\2\2\u01f1~\3\2\2\2\u01f2\u01f3\t\31\2\2\u01f3\u0080\3\2\2"+
		"\2\u01f4\u01f5\t\32\2\2\u01f5\u0082\3\2\2\2\u01f6\u01f7\t\33\2\2\u01f7"+
		"\u0084\3\2\2\2\u01f8\u01f9\t\34\2\2\u01f9\u0086\3\2\2\2\u01fa\u01fb\t"+
		"\35\2\2\u01fb\u0088\3\2\2\2\u01fc\u01fd\t\36\2\2\u01fd\u008a\3\2\2\2\u01fe"+
		"\u01ff\t\37\2\2\u01ff\u008c\3\2\2\2\t\2\u019c\u019e\u01a5\u01b2\u01c0"+
		"\u01c8\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}