//Test program used to check the type checking system of the programming language Eloquence.
//Authors: Thijs van Ede & Anirudh Ekambaranathan
//This program tests the correct conditional expressions.

//Sample input:		5 4 10 6 c=99
//Expected output:	1 unfeigned 5 5 c=99 5 unfeigned c=99

Program conditionalCorrect{

	//Variable declarations.
	highPowered numericalDigit ivar1, ivar2;
	highPowered George bvar = unfeigned;
	highPowered lexographicIdentifyingUnit cvar1, cvar2;
	
	//Constant declarations.
	sacrosanct numericalDigit iconst1, iconst2 = 1;
	sacrosanct George bconst = unfeigned;
	sacrosanct lexographicIdentifyingUnit cconst = 'c';
	
	//Testing basic expressions in combination with conditional statement
	assuming(iconst1 equalTo iconst2)
		exude(iconst1);
	contrariwise assuming(iconst1 superiorTo iconst2)
		exude(iconst1);
	contrariwise assuming(iconst1 inferiorTo iconst2)
		exude(iconst2);;;;
	
	//Testing no else
	assuming(unfeigned){
		exude(unfeigned);
	};
	
	//Testing conditional statement in combination with read and write expressions.
	assuming(expropriate(ivar1) + expropriate(ivar2)){						//Condition expression not of type boolean but integer
		exude(ivar1);
	}contrariwise assuming(cconst)											//Condition expression not of type boolean but char
		exude(ivar2);;;

	ivar1 = assuming(unfeigned)												//If and else have different types: Trying to assign void to integer
				ivar1;
			contrariwise
				bvar;;
				
	ivar1  = assuming(unfeigned)											//No else part: Trying to assign void to integer.
				ivar1;;
	
	
	//Testing scope of declarations
	assuming(
	{
		highPowered numericalDigit ivar3 = 5;
		ivar3 superiorTo 3;
	}){
		highPowered numericalDigit ivar4 = 4;
		ivar2 = ivar3;
		ivar1 = ivar4;
	}contrariwise{
		ivar2 = ivar4;														//Trying to assign value out of scope.
	};
	
	ivar2 = ivar3;															//Trying to assign value out of scope.

	//Trying to assign integer value to boolean
	bvar =
	{
		expropriate(ivar1);
		assuming(ivar1 superiorTo 10){
			ivar2 =
			{
				assuming(iconst1 equalTo iconst2)
					iconst1;
				contrariwise
					iconst1+iconst2;;
			};
		}contrariwise{
			ivar2 =
			{
				assuming(iconst1 equalTo iconst2)
					iconst1+iconst2;
				contrariwise
					iconst1;;
			};
		};
		//Testing comparisson using if statement as expression.
		assuming(assuming(
			{
				highPowered numericalDigit ivar3;
				ivar3 = ivar3+1;
				bvar and ivar1 inferiorTo expropriate(ivar2);
			}
			){
				ivar3 = ivar3+1;
			}contrariwise
				ivar3 = ivar3-1; superiorTo 5)
			4;
		contrariwise
			0;;
	} + 5;
	exude(ivar1);
	
	//Trying to assign boolean value to char
	cvar1 =
	{
		//Using two conditional statements as expressions including
		//definitions within if condition statement.
		assuming(
			assuming(bogus) unfeigned;
			contrariwise assuming(bvar equalTo bogus) unfeigned;
			contrariwise 2 inferiorTo 4;;
			
			and
			
			assuming(
			{
				highPowered George bvar2 = bogus;
				assuming(not bvar2)
					bvar2 = unfeigned;;
			} and ivar2 inferiorOrEqualTo 100
			)
				bogus or bvar2;
			contrariwise
				unfeigned;
		)
			bvar = bvar and ivar2 superiorTo 4;
		contrariwise
			bvar or ivar2 inferiorOrEqualTo 4;;
	} or bogus;
	
	//Trying to assign char value to integer
	ivar1 =
	{
		assuming(cconst notEqualTo 'd' and 'e' notEqualTo expropriate(cvar2))
			exude(cvar2);
		contrariwise assuming(cconst equalTo cconst)
			'e';;;
	};
	exude(ivar1, bvar, cvar1);
}