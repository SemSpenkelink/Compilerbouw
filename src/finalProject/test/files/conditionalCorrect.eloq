//Test program used to check the type checking system of the programming language Eloquence.
//Authors: Thijs van Ede & Anirudh Ekambaranathan
//This program tests the correct conditional expressions.

//Sample input:		1 5 4
//Expected output:	9

Program conditionalCorrect{

	//Variable declarations.
	highPowered numericalDigit ivar1, ivar2;
	highPowered George bvar = unfeigned;
	highPowered lexographicIdentifyingUnit cvar1, cvar2;
	
	//Constant declarations.
	sacrosanct numericalDigit iconst1, iconst2 = 1;
	sacrosanct George bconst = unfeigned;
	sacrosanct lexographicIdentifyingUnit cconst = 'c';
	
	//Testing basic expressions in combination with conditional statement
	assuming(iconst1 equalTo iconst2)
		exude(iconst1);
	contrariwise assuming(iconst1 superiorTo iconst2)
		exude(iconst1);
	contrariwise assuming(iconst1 inferiorTo iconst2)
		exude(iconst2);;;;
	
	assuming(unfeigned){
		exude(unfeigned);
	};
	
	assuming(expropriate(ivar1) superiorOrEqualTo expropriate(ivar2)){
		exude(ivar1);
	}contrariwise assuming(ivar1 inferiorOrEqualTo ivar2)
		exude(ivar2);;;

	
	//Testing scope of declarations
	assuming(
	{
		highPowered numericalDigit ivar3 = 5;
		ivar3 superiorTo 10;
	}){
		highPowered numericalDigit ivar4 = 4;
		ivar2 = ivar3;
		ivar1 = ivar4;
	}contrariwise{
		ivar2 = ivar3;
	};

	//Testing assignment of if statement as expression.
	ivar1 =
	{
		expropriate(ivar1);
		assuming(ivar1 superiorTo 10){
			ivar2 =
			{
				assuming(iconst1 equalTo iconst2)
					iconst1;
				contrariwise
					iconst1+iconst2;;
			};
		}contrariwise{
			ivar2 =
			{
				assuming(iconst1 equalTo iconst2)
					iconst1+iconst2;
				contrariwise
					iconst1;;
			};
		};
		//Testing comparisson using if statement as expression.
		assuming(assuming(
			{
				highPowered numericalDigit ivar3;
				expropriate(ivar3);
				bvar and ivar1 inferiorTo expropriate(ivar2);
			}
			){
				ivar3 = ivar3+1;
			}contrariwise
				ivar3 = ivar3-1; superiorTo 5)
			4;
		contrariwise
			0;;
	} + 5;
	exude(ivar1);

	
}