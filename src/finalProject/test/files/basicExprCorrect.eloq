//Test program used to check the type checking system of the programming language Eloquence.
//Authors: Thijs van Ede & Anirudh Ekambaranathan
//This program tests the correct basic expressions.

//Sample input:		0 1 bogus 'c' 2 1 2 0 bogus 'c'
//Expected output:	1 bogus unfeigned 0 1 unfeigned bogus c a unfeigned 2 1 2 unfeigned unfeigned 0 0 bogus unfeigned a unfeigned 1 unfeigned b

Program basicExprCorrect{
	//Test variable declarations.
	highPowered numericalDigit ivar1, ivar2;
	highPowered George bvar;
	highPowered lexographicIdentifyingUnit cvar1, cvar2;
	
	//Test constant declarations.
	sacrosanct numericalDigit iconst1, iconst2 = 1;
	sacrosanct George bconst = unfeigned;
	sacrosanct lexographicIdentifyingUnit cconst = 'c';
	
	//Simple and multiple assignment statements.
	ivar2 = ivar1 = +16 + 2 * -8;
	bvar = 12 / 5 * 5 + 12 % 5 equalTo 12 and 6 superiorOrEqualTo 6;
	cvar2 = 'z';

	//Read statements
	expropriate(ivar1, ivar2);
	expropriate(bvar);
	expropriate(cvar1);
	
	//Print statements;
	exude(ivar2);
	exude(bvar);
	exude(not bogus and bvar equalTo bconst or unfeigned notEqualTo bogus);
	exude(ivar1, ivar2);
	exude(ivar1 inferiorTo ivar2 and iconst1 inferiorOrEqualTo iconst2,
		  iconst1 * iconst2 superiorTo ivar2 - ivar1);
	exude('c');
	exude('a', cvar1 equalTo cconst and (cvar2 notEqualTo 'b' or not unfeigned));
	
	//Read and print as operands
	ivar1 inferiorTo expropriate(ivar2) and iconst1 inferiorOrEqualTo iconst2;
	ivar2 = exude(ivar2)+1;

	//Test compound integer assignment and operations.
	ivar1 =
	{
		highPowered numericalDigit tmpivar1, tmpivar2;
		expropriate(tmpivar1, tmpivar2);
		exude(tmpivar1, tmpivar2);
		sacrosanct numericalDigit tmpiconst1 = 1;
		sacrosanct numericalDigit tmpiconst2 = 2;
		tmpivar1 = tmpivar2 = +16 + 2 * -8;
		exude(tmpivar1 inferiorTo tmpivar2 and tmpiconst1 inferiorOrEqualTo tmpiconst2,
			  tmpiconst1*tmpiconst2 superiorTo tmpivar2-tmpivar1);
		tmpivar1 inferiorTo expropriate(tmpivar2) and tmpiconst1 inferiorOrEqualTo tmpiconst2;
		tmpivar2 = exude(tmpivar2)+1;
		exude(tmpivar2);
	} +1;
	
	//Test compound boolean assignment and operations.
	bvar =
	{
		highPowered George tmpbvar;
		expropriate(tmpbvar);
		exude(tmpbvar);
		tmpbvar = 12 / 5 * 5 + 12 % 5 - 12 equalTo 2 and 6 superiorOrEqualTo 6;
		sacrosanct George tmpbconst = unfeigned;
		exude(not bogus and tmpbvar equalTo tmpbconst or bogus notEqualTo unfeigned);
	} and unfeigned;
	
	//Test compound character assignment and operations.
	cvar1 =
	{
		highPowered lexographicIdentifyingUnit tmpcvar1, tmpcvar2;
		expropriate(tmpcvar1);
		sacrosanct lexographicIdentifyingUnit tmpcconst = 'c';
		tmpcvar2 = 'z';
		exude('a', tmpcvar1 equalTo tmpcconst and (tmpcvar2 notEqualTo 'b' or not unfeigned));
		'b';
	};
	
	//Output results.
	exude(ivar1, bvar, cvar1);
}