start:  in "x" => r_x					//set input in register x
		loadI 0 => r_i					//set i to 0
		loadI @alength => r_l			//load a.length into r_l
for:	cmp_LT r_i, r_l => r_cmp		//compare i < a.length
		cbr r_cmp -> body, end			//if r_cmp body else end
body:	multI r_i, 4 => r_j				//multiply 4 with r_i to get offset
		addI r_j, @a => r_o				//get location of a[i]
		loadAO r_arp, r_o => r_ai		//load a[i]
		cmp_EQ r_ai, r_x => r_cmpEq		//compare a[i] and x
		cbr r_cmpEq -> end, cont		//if r_cmp if else 
cont:	addI r_i, 1 => r_i				//i++
		jumpI -> for					//jump back to for
end:	out "Index: ", r_i				//printf
